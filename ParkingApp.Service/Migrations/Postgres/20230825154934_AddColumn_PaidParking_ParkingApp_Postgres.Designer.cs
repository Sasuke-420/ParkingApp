// <auto-generated />
using System;
using Lisec.ParkingApp.Utilities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lisec.ParkingApp.Migrations.Postgres
{
    [DbContext(typeof(ParkingAppPostgresDBContext))]
    [Migration("20230825154934_AddColumn_PaidParking_ParkingApp_Postgres")]
    partial class AddColumn_PaidParking_ParkingApp_Postgres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lisec.ParkingApp.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Lisec.ParkingApp.Models.PaidParking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountPaid")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Settled")
                        .HasColumnType("boolean");

                    b.Property<string>("SharesId")
                        .HasColumnType("text");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(9,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PaidParkings");
                });

            modelBuilder.Entity("Lisec.ParkingApp.Models.UserCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CarNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(9,0)");

                    b.HasKey("Id");

                    b.HasIndex("CarNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserCars");
                });

            modelBuilder.Entity("Lisec.ParkingApp.Models.UserCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(9,0)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCards");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterApplicationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("desc");

                    b.Property<decimal?>("EntityId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("entity_id");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasMaxLength(240)
                        .HasColumnType("integer")
                        .HasColumnName("deployment_type");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("master_application_details");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterAuthorization", b =>
                {
                    b.Property<decimal>("AuthId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("auth_id");

                    b.Property<string>("AuthDesc")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("auth_desc");

                    b.Property<string>("AuthName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("auth_name");

                    b.Property<int?>("Commercial")
                        .HasColumnType("integer")
                        .HasColumnName("commercial");

                    b.Property<string>("DependsOn")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("dependent_on");

                    b.Property<decimal?>("DescId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("desc_id");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.HasKey("AuthId")
                        .HasName("pk_master_authorization");

                    b.ToTable("master_authorization");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntity", b =>
                {
                    b.Property<decimal>("EntityId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("entity_id");

                    b.Property<decimal?>("AssignedUser")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("assigned_user");

                    b.Property<decimal?>("DbType")
                        .HasColumnType("numeric(3,0)")
                        .HasColumnName("db_type");

                    b.Property<decimal?>("Disabled")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("disabled");

                    b.Property<string>("EntityDesc")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("entity_desc");

                    b.Property<string>("EntityShdesc")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("entity_shdesc");

                    b.Property<decimal?>("EntityType")
                        .HasColumnType("numeric(2,0)")
                        .HasColumnName("entity_type");

                    b.Property<string>("HostIp")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("host_ip");

                    b.Property<string>("LicenseSignature")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("license_signature");

                    b.Property<string>("LicenseSiteApiKey")
                        .HasColumnType("text")
                        .HasColumnName("license_site_api_key");

                    b.Property<int?>("LicenseSiteId")
                        .HasColumnType("integer")
                        .HasColumnName("license_site_id");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<decimal?>("PortOffset")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("port_offset");

                    b.Property<decimal?>("SubEntityOf")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("sub_entity_of");

                    b.HasKey("EntityId")
                        .HasName("pk_master_company_entity");

                    b.HasIndex("AssignedUser")
                        .HasDatabaseName("mascoment_masuse_idx");

                    b.HasIndex("SubEntityOf")
                        .HasDatabaseName("mascoment_mascoment_idx");

                    b.ToTable("master_company_entity");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntityFeature", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("id");

                    b.Property<decimal?>("Commercial")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("commercial");

                    b.Property<string>("DependentOn")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("dependent_on");

                    b.Property<string>("Description")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(1,0)")
                        .HasDefaultValue(1m)
                        .HasColumnName("enabled");

                    b.Property<decimal>("EntityId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("entity_id");

                    b.Property<decimal>("FeatureId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("feature_id");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<decimal?>("MultitermId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("multiterm_id");

                    b.Property<string>("Name")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("name");

                    b.Property<string>("SapId")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("sap_id");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_to");

                    b.HasKey("Id")
                        .HasName("pk_master_company_entity_id");

                    b.HasIndex("EntityId");

                    b.HasIndex("FeatureId");

                    b.ToTable("master_company_entity_feature");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterJobTitle", b =>
                {
                    b.Property<decimal>("JobTitleId")
                        .HasColumnType("numeric(3,0)")
                        .HasColumnName("job_title_id");

                    b.Property<decimal?>("Disabled")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("disabled");

                    b.Property<string>("JobTitleDesc")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("job_title_desc");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.HasKey("JobTitleId")
                        .HasName("pk_master_job_title");

                    b.ToTable("master_job_title");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterRole", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("role_id");

                    b.Property<decimal?>("Disabled")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("disabled");

                    b.Property<decimal>("EntityId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("entity_id");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("RoleDesc")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("role_desc");

                    b.Property<string>("RoleShdesc")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("role_shdesc");

                    b.Property<decimal?>("ScopeLevel")
                        .HasColumnType("numeric(3,0)")
                        .HasColumnName("scope_level");

                    b.Property<decimal?>("SubRoleOf")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("sub_role_of");

                    b.Property<decimal?>("UserType")
                        .HasColumnType("numeric(3,0)")
                        .HasColumnName("user_type");

                    b.HasKey("RoleId")
                        .HasName("pk_master_role");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("masrol_mascoment_idx");

                    b.HasIndex("SubRoleOf")
                        .HasDatabaseName("masrol_masrol_idx");

                    b.ToTable("master_role");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterRoleAdGroups", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("role_id");

                    b.Property<string>("AzureAdGroupId")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("azure_ad_group_id");

                    b.Property<string>("AzureAdGroupName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("azure_ad_group_name");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.HasKey("RoleId", "AzureAdGroupId");

                    b.ToTable("master_role_ad_groups");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterRoleAuthAssgnmt", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("role_id");

                    b.Property<decimal>("AuthId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("auth_id");

                    b.Property<decimal?>("FatClient")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("fat_client");

                    b.Property<decimal?>("Mobile")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("mobile");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<decimal?>("ThirdParty")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("third_party");

                    b.Property<decimal?>("Web")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("web");

                    b.HasKey("RoleId", "AuthId")
                        .HasName("pk_master_role_auth_assgnmt");

                    b.HasIndex("AuthId");

                    b.ToTable("master_role_auth_assgnmt");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterRoleSetting", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("role_id");

                    b.Property<string>("KeyName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("key_name");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("value");

                    b.HasKey("RoleId", "KeyName");

                    b.ToTable("master_role_setting");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("user_id");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("abbreviation");

                    b.Property<decimal?>("ActiveDirectoryUser")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("external_directory_user");

                    b.Property<decimal?>("AdminYn")
                        .HasColumnType("numeric(2,0)")
                        .HasColumnName("admin_yn");

                    b.Property<string>("AzureADId")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("external_directory_id");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthdate");

                    b.Property<decimal?>("DateRestriction")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("date_restriction");

                    b.Property<DateTime?>("DateRestrictionFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_restriction_from");

                    b.Property<DateTime?>("DateRestrictionTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_restriction_to");

                    b.Property<decimal?>("Disabled")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("disabled");

                    b.Property<string>("Email")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("email");

                    b.Property<decimal?>("EntityId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("entity_id");

                    b.Property<string>("FirstName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("first_name");

                    b.Property<decimal?>("GraphicFileRef")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("graphic_file_ref");

                    b.Property<string>("HwKey")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("hw_key");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastPwdChange")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_pwd_change");

                    b.Property<decimal?>("LockedYn")
                        .HasColumnType("numeric(2,0)")
                        .HasColumnName("locked_yn");

                    b.Property<decimal?>("LoginFailed")
                        .HasColumnType("numeric(2,0)")
                        .HasColumnName("login_failed");

                    b.Property<string>("LoginName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("login_name");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<decimal?>("OsuserYn")
                        .HasColumnType("numeric(2,0)")
                        .HasColumnName("osuser_yn");

                    b.Property<string>("Password")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("password");

                    b.Property<string>("PersonalNumber")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("personal_number");

                    b.Property<string>("PwAlgorithm")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("pw_algorithm");

                    b.Property<decimal?>("PwdChangeReq")
                        .HasColumnType("numeric(2,0)")
                        .HasColumnName("pwd_change_req");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text")
                        .HasColumnName("reset_token");

                    b.Property<decimal?>("UserType")
                        .HasColumnType("numeric(3,0)")
                        .HasColumnName("user_type");

                    b.HasKey("UserId")
                        .HasName("pk_master_user");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("masuse_mascoment_idx");

                    b.HasIndex("LoginName")
                        .IsUnique()
                        .HasDatabaseName("uk_master_user_login_name");

                    b.ToTable("master_user");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUserJobTitle", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("user_id");

                    b.Property<decimal>("JobTitleSeq")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("job_title_seq");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("from_date");

                    b.Property<decimal>("JobTitleId")
                        .HasColumnType("numeric(3,0)")
                        .HasColumnName("job_title_id");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("to_date");

                    b.HasKey("UserId", "JobTitleSeq")
                        .HasName("pk_master_user_job_title");

                    b.HasIndex("JobTitleId")
                        .HasDatabaseName("masusejobtit_masjobtit_idx");

                    b.ToTable("master_user_job_title");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUserRoles", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("user_id");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_master_user_roles");

                    b.HasIndex("RoleId");

                    b.ToTable("master_user_roles");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUserSetting", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("user_id");

                    b.Property<string>("KeyName")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("key_name");

                    b.Property<DateTime?>("Modified")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "KeyName");

                    b.ToTable("master_user_setting");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUserToken", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("DeactivatedTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deactivated_timestamp");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("token_created");

                    b.Property<decimal?>("TokenDeactivated")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("token_deactivated");

                    b.Property<DateTime?>("TokenLastUsed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("token_last_used");

                    b.Property<decimal?>("TokenType")
                        .HasColumnType("numeric(2,0)")
                        .HasColumnName("token_type");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("user_id");

                    b.Property<decimal?>("WorkstationUserId")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("workstation_user_id");

                    b.HasKey("Token")
                        .HasName("pk_master_user_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("masusetok_masuse_idx");

                    b.HasIndex("WorkstationUserId")
                        .HasDatabaseName("masusetok_masuse2_idx");

                    b.ToTable("master_user_token");
                });

            modelBuilder.Entity("Lisec.ParkingApp.Models.PaidParking", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lisec.ParkingApp.Models.UserCar", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lisec.ParkingApp.Models.UserCard", b =>
                {
                    b.HasOne("Lisec.ParkingApp.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterApplicationDetails", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntity", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", "AssignedUserNavigation")
                        .WithMany("MasterCompanyEntity")
                        .HasForeignKey("AssignedUser")
                        .HasConstraintName("fk_mascoment_masuse");

                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntity", "SubEntityOfNavigation")
                        .WithMany("InverseSubEntityOfNavigation")
                        .HasForeignKey("SubEntityOf")
                        .HasConstraintName("fk_mascoment_mascoment");

                    b.Navigation("AssignedUserNavigation");

                    b.Navigation("SubEntityOfNavigation");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntityFeature", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntity", "Entity")
                        .WithMany("MasterCompanyEntityFeatures")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mastercompanyentityfeature_mastercompanyentity");

                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterAuthorization", "Feature")
                        .WithMany("MasterCompanyEntityFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mastercompanyentityfeature_masterauthorization");

                    b.Navigation("Entity");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterRole", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntity", "Entity")
                        .WithMany("MasterRole")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_masrol_mascoment");

                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterRole", "SubRoleOfNavigation")
                        .WithMany("InverseSubRoleOfNavigation")
                        .HasForeignKey("SubRoleOf")
                        .HasConstraintName("fk_masrol_masrol");

                    b.Navigation("Entity");

                    b.Navigation("SubRoleOfNavigation");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterRoleAdGroups", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterRoleAuthAssgnmt", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterAuthorization", "Auth")
                        .WithMany("MasterRoleAuthAssgnmt")
                        .HasForeignKey("AuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_masrolautass_masaut");

                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterRole", "Role")
                        .WithMany("MasterRoleAuthAssgnmt")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_masrolautass_masrol");

                    b.Navigation("Auth");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterRoleSetting", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntity", "Entity")
                        .WithMany("MasterUser")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("fk_masuse_mascoment");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUserJobTitle", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterJobTitle", "JobTitle")
                        .WithMany("MasterUserJobTitle")
                        .HasForeignKey("JobTitleId")
                        .IsRequired()
                        .HasConstraintName("fk_masusejobtit_masjobtit");

                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", "User")
                        .WithMany("MasterUserJobTitle")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_masusejobtit_masuse");

                    b.Navigation("JobTitle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUserRoles", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterRole", "Role")
                        .WithMany("MasterUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_masuserol_masrol");

                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", "User")
                        .WithMany("MasterUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_masuserol_masuse");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUserSetting", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUserToken", b =>
                {
                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", "User")
                        .WithMany("MasterUserTokenUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_masusetok_masuse");

                    b.HasOne("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", "WorkstationUser")
                        .WithMany("MasterUserTokenWorkstationUser")
                        .HasForeignKey("WorkstationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_masusetok_masuse2");

                    b.Navigation("User");

                    b.Navigation("WorkstationUser");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterAuthorization", b =>
                {
                    b.Navigation("MasterCompanyEntityFeatures");

                    b.Navigation("MasterRoleAuthAssgnmt");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterCompanyEntity", b =>
                {
                    b.Navigation("InverseSubEntityOfNavigation");

                    b.Navigation("MasterCompanyEntityFeatures");

                    b.Navigation("MasterRole");

                    b.Navigation("MasterUser");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterJobTitle", b =>
                {
                    b.Navigation("MasterUserJobTitle");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterRole", b =>
                {
                    b.Navigation("InverseSubRoleOfNavigation");

                    b.Navigation("MasterRoleAuthAssgnmt");

                    b.Navigation("MasterUserRoles");
                });

            modelBuilder.Entity("Lisec.UserManagementDB.Domain.Models.Master.MasterUser", b =>
                {
                    b.Navigation("MasterCompanyEntity");

                    b.Navigation("MasterUserJobTitle");

                    b.Navigation("MasterUserRoles");

                    b.Navigation("MasterUserTokenUser");

                    b.Navigation("MasterUserTokenWorkstationUser");
                });
#pragma warning restore 612, 618
        }
    }
}
